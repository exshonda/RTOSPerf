#
#  ZYNQ porting
#  2012 (c) Daniel Sangorrin (daniel.sangorrin@gmail.com)
#  2017 (c) Shinya Honda (honda@ertl.jp)
#

#  GNU toolchain prefix (change if necessary)
GCC_TARGET ?= arm-none-eabi

#  Board name
ifeq "$(strip $(BOARD))" ""
 BOARD = ZYBO
 #BOARD = ZYBO_Z7
 #BOARD = ARDUZYNQ
 #BOARD = ZEDBOARD
endif

#  MPCore type
CORE = CA9

# FPU
ENABLE_VFPV3_NEON = true

#  When using SafeG, the application's Makefile can define the variable
#  SAFEG as SECURE or NONSECURE for declaring the world in which it
#  is supposed to run. When not using SafeG, NOSAFEG,  a suitable
#  configuration will be chosen for FMP to run on the processor.
ifeq ($(SAFEG),SECURE)
# SECURE parameters: 0x1c100000~, private timers, UART-0 (G_SYSLOG)
# ----------------------------------------------------------
BASE_ADDR      = 0x1c100000
SYSTIMER_TYPE  = CA9_PRIVATE_WDT
CDEFS         := $(CDEFS) -DTOPPERS_SAFEG_SECURE -DG_SYSLOG -DTARGET_CORE0_NS_START_ADDR=0x8000
CDEFS         := $(CDEFS) -DENABLE_NMFI -DUSE_GIC_CPULOCK
else
ifeq ($(SAFEG),NONSECURE)
# NONSECURE parameters: 0x8000~. watchdog timer (global), UART-1 (G_SYSLOG)
# ---------------------------------------------------------------------------
BASE_ADDR      = 0x00008000
SYSTIMER_TYPE  = CA9_PRIVATE_TIMER
CDEFS         := $(CDEFS) -DTOPPERS_SAFEG_NONSECURE -DG_SYSLOG
else
# NOSAFEG parameters: 0x0~, private timers, UART-1 (G_SYSLOG)
# ----------------------------------------------------------
# BASE_ADDR      = 0x0
# SYSTIMER_TYPE  = CA9_PRIVATE_TIMER
# CDEFS         := $(CDEFS) -DTOPPERS_NOSAFEG -DG_SYSLOG
# NOSAFEG parameters: 0x0~, private timers, UART-01 (buggy)
# ----------------------------------------------------------
BASE_ADDR      = 0x00100000
SYSTIMER_TYPE  = CA9_PRIVATE_TIMER
#SYSTIMER_TYPE  = CA9_PRIVATE_WDT
CDEFS         := $(CDEFS) -DTOPPERS_NOSAFEG -DG_SYSLOG
endif
endif
TEXT_START_ADDRESS=$(BASE_ADDR)

# When using QEMU we may need special settings. For example, we are not
# able to use the WFI instruction in the idle task
ifeq ($(ENABLE_QEMU),true)
CDEFS := $(CDEFS) -DTOPPERS_ENABLE_QEMU
endif

COPTS   := $(COPTS) -ffunction-sections -fdata-sections
LDFLAGS := $(LDFLAGS) -Wl,--gc-sections

#  Compiler options
INCLUDES := $(INCLUDES) -I$(TARGETDIR)
COPTS    := $(COPTS) -mlittle-endian
LDFLAGS  := $(LDFLAGS) -mlittle-endian
CDEFS    := $(CDEFS) -DBASE_ADDR=$(BASE_ADDR) -D$(SYSTIMER_TYPE) -DBOARD_$(BOARD)

#  Kernel definitions
KERNEL_DIR   := $(KERNEL_DIR) $(TARGETDIR)
KERNEL_COBJS := $(KERNEL_COBJS) target_config.o pl310.o
KERNEL_ASMOBJS := $(KERNEL_ASMOBJS) target_support.o start.o
ifeq ($(SYSTIMER_TYPE),CA9_PRIVATE_TIMER)
KERNEL_COBJS  := $(KERNEL_COBJS) chip_timer.o
else
KERNEL_COBJS  := $(KERNEL_COBJS) chip_wdt.o
endif

#  System services (e.g., serial logger)
SYSSVC_DIR   := $(SYSSVC_DIR) $(TARGETDIR)
SYSSVC_COBJS := $(SYSSVC_COBJS) target_serial.o

#  Trace logger definitions
ifeq ($(ENABLE_TRACE),true)
      COPTS        := $(COPTS) -DTOPPERS_ENABLE_TRACE
      KERNEL_DIR   := $(KERNEL_DIR) $(SRCDIR)/arch/logtrace
      KERNEL_COBJS := $(KERNEL_COBJS) trace_config.o trace_dump.o
endif

#  Linker script
LDSCRIPT = $(TARGETDIR)/zynq.ld

LDFLAGS := -nostdlib $(LDFLAGS)
CFG1_OUT_LDFLAGS := -nostdlib $(CFG1_OUT_LDFLAGS)

# Omit data initialization when DATA_START_ADDRESS is not defined
ifndef DATA_START_ADDRESS
CDEFS := $(CDEFS) -DTOPPERS_OMIT_DATA_INIT
endif

#  Dependency timestamp
kernel_cfg.timestamp: $(TARGETDIR)/target.tf
$(OBJFILE): $(TARGETDIR)/target_check.tf

#  Include the MPCore Makefile
include $(SRCDIR)/arch/arm_gcc/mpcore/Makefile.chip

#  QEMU using Xilinx SDK
XILINX_SDK = c:/Xilinx/SDK/2018.2/
QEMU = $(XILINX_SDK)/bin/qemu-system-aarch64.bat

runq: $(OBJFILE)
	$(QEMU) -M arm-generic-fdt-7series -m 128 -serial null -serial mon:stdio \
	-nographic -smp 2 -dtb $(XILINX_SDK)/data/qemu/zynq/zed/system.dtb \
	-kernel $(OBJFILE)
