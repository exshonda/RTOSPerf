=====================================================================
                        MPCore依存部マニュアル
                                  Last Modified:2018 Oct 25 19:07:08
=====================================================================

○概要

MPCore依存部は，ARM社のMPCoreをターゲットとしている．


○カーネルの使用リソース

プロセッサ毎にカーネルは以下のリソースを使用する．

●コア内蔵タイマ

カーネルのティックとして用いる．

●SCUカウンタMN0

性能評価用にSCUカウンタのMN0を用いる．


○割込み処理関係

割込みはDICを用いて扱う．

●割込みハンドラ番号と割込み番号

DICで割付けられている番号を割込みハンドラ番号及び割込み番号とする．

●割込み優先度の最小値と最大値

割込み優先度の最小値は-15であり，最大値は-1である．

●dis_int/ena_int のサポート

dis_int/ena_intをサポートしている．

●カーネル管理外の割込みサポート

カーネル管理外の割込みはサポートしていない．


○性能評価用システム時刻の参照

コア内蔵タイマによる get_utm をサポートしている．


○チップ依存の初期化ルーチン

チップ依存の初期化ルーチンとして，chip_initialize()があり，以下の初期
化を行う．

●DICの初期化

DICを一旦無効にして，全ての割込みを禁止した上で，ペンディングビットを
クリアした後，有効にする．

●SCUの初期化

SCUを有効にして，全てのコアのモードをNORMALとする．

●ARM依存部の初期化ルーチンの呼び出し

ARM依存部の初期化ルーチンである，core_initialize()を呼び出す．

●MMUの初期化

MMUを初期化して，ページテーブルを以下の設定で1つ作成する．

  ・全セクションを物理アドレス = 仮想アドレス
  ・ノンキャッシャブル，ノンバッファブルとする 

●キャッシュを有効に

IキャッシュとDキャッシュの両方を有効にする．

●DICのCPUインタフェースを有効に

プロセッサの割込み優先度を最低優先度とし，割込み優先度の全ビットを有効
にして，EOIによりペンディングしている割込みをクリアする．


○チップ依存の終了処理ルーチン

チップ依存の初期化ルーチンであるchip_exit()では，以下の終了処理を行う．

●ARM依存部の終了処理ルーチンの呼び出し

ARM依存部の終了処理ルーチンである，core_exit()を呼び出す．

●DICのCPUインタフェースを停止する

●DICのDISインタフェースの停止


○性能評価用カウンタ用ルーチン

プロセッサを跨ぐ時間を計測するために，SCUのMN0カウンタを用いた計測ルー
チンを用意している．カウントはCPUクロックで行われる．

  void scu_counter_init(void); //カウンターの初期化

  void scu_counter_reset(void) //カウンター値のリセット

  void scu_counter_get_current(void) //カウンター値の取得


=====================================================================
                ターゲット依存部開発者向けの情報
=====================================================================
○アーキテクチャ指定

アーキテクチャを次のマクロで指定する．

__TARGET_ARCH_ARM

ARM11 MPCore (ARMv6)を用いる場合は，6に定義し，Cortex-A9 MPCore (ARMv7) 
を用いる場合は，7に定義する．

また，ターゲットの.tfファイルで，ARM11 MPCore (ARMv6)を用いる場合は，
arm11_mpcore.tfをインクルードし，Cortex-A9 MPCore (ARMv7) を用いる場合
は，ca9_mpcore.tfをインクルードする．

○コア内蔵ペリフェラルのベースアドレスを次のマクロで指定する．

  MPCORE_PMR_BASE

○MMUの初期化ルーチン

MMUの基本的な初期化の終了後，ターゲット依存で行いたいMMUの初期化処理を
以下の関数に記述する．

  void target_mmu_init(void)

MPCore依存部では，MMUの初期化用の関数として次の関数を提供する

  void mmu_map_memory(MEMORY_ATTRIBUTE *m_attribute);

引数のMEMORY_ATTRIBUTE は設定したいメモリ領域のサイズやキャッシュの有
効無効等を設定する．
    
	typedef struct{
		uintptr_t   va;
		uintptr_t   pa;
		uint32_t    size;
		uint8_t     s;
		uint8_t     tex;
		uint8_t     ap;
		uint8_t     c;
		uint8_t     b;
	}MEMORY_ATTRIBUTE;

○chip_mprc_initialize()の呼び出し

target_mprc_initialize()からの呼び出すこと．

○chip_initialize()の呼び出し

target_initialize()からの呼び出すこと．


=====================================================================
                             変更履歴
=====================================================================
2018/10/25
・chip_config.h 
  ・不要なEOIをしていた問題を修正

2018/10/19
・CA9ではSGIはDIS_INTできないため，VALID_INTNO_DISINT() でエラーとする
  よう変更

2012/06/18
・xxx_stddef.h を相対パスではなくファイル名のみで指定するように変更．
  どのファイルを用いるかは他のファイルと同様にコンパイラへのインクルー
  ド指定の順序とする．
  
2012/05/01
・MPCore依存部のコードのうち，ARMv6/ARMv7依存の部分をARM依存部に移動．
・GIC依存部をMPCore依存部からARM依存部へ移動．

2012/04/29
・インデントをスペースからタブに変更．
・その他HRP2とコードを極力合わせるように変更．

2012/04/28
・MMUの初期化ルーチンの効率化
・ページテーブルの初期化は全てターゲット依存部で行う．

2012/01/13
・ARMCC対応のための変更．
・割込み・例外の出入口処理をFMP 1.2 と互換に変更．

2011/08/04
・共通部 1.7 追従．
・FMP 1.2 での変更を反映．

2010/08/06
・共通部 1.6 追従．

2010/07/26
・アセンブラファイル中の分岐命令を AAPCS推奨に変更．

2009/07/14
・マニュアルの整備．
・例外フレーム入れる例外前の割込み優先度マスクの値をターゲット依存の
  値から外部表現に変更．
・性能評価用のSCUカウンタ操作ルーチンを追加．

以上．
